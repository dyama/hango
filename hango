#!/usr/bin/env ruby
# coding: utf-8

require 'rubygems'
require 'bundler'
require 'bundler/setup'

require 'optparse'
require 'fileutils'
require 'zip'
require 'mozjpeg'
require 'rmagick'

$o = ARGV.getopts(
  'vq:gw:h:',
  'ext:jpg,jpeg,jiff,png,gif,bmp,tif,tiff',
  'tmpdir:/tmp',
  'version')

show_version = $o['v']
quality = ($o['q'] || 60).to_i
grayscale = $o['g']
w = $o['w'].to_i
h = $o['h'].to_i
overwrite = $o['o']

$exts = %w(jpeg jpg jpe jfi jfif jp2 j2c gif png bmp tiff tif tga tpic webp bmp pic pict pct psd psb pdd pdf svg svgz)
$exts << $exts.map(&:upcase)
$exts.flatten!

# $o['ext'] = $o['ext'].split(/,/)

tmpdir = "/tmp/hango-#{$$}"
extdir = File.join(tmpdir, '1')
resdir = File.join(tmpdir, '2')
outdir = File.join(tmpdir, '3')

ARGV.each do |afile|

  FileUtils.rm_r(tmpdir) if Dir.exist?(tmpdir)
  FileUtils.mkdir_p(extdir)
  FileUtils.mkdir_p(resdir)
  FileUtils.mkdir_p(outdir)

  imgfiles = []
  begin
    print "Extract:"
    Zip::InputStream.open(afile, 0) do |stream|
      while (ent = stream.get_next_entry)
        ext = File.extname(ent.name)
        if $exts.any? {|x| ".#{x}" == ext }
          destfile = File.join(extdir, ent.name)
          destfile = destfile.encode('UTF-8', 'Shift_JIS')
          File.write(destfile, stream.read)
          imgfiles << destfile
          print "."
        end
      end
    end
  rescue
    next
  end

  # imgfiles = imgfiles.sort_by(&:to_i)
  imgfiles.sort!

  puts ""
  print "Convert:"
  imgfiles.each_with_index do |file, i|

    filename = '%05d.jpg' % i
    tmp = File.join(resdir, filename)
    dest = File.join(outdir, filename) 

    #begin
      if w > 0 || h > 0 || grayscale
        img = Magick::Image.read(file).first
        if w > 0 && h > 0
          img = img.resize(w, h)
        elsif w > 0
          f = w.to_f / img.columns
          img = img.resize(w, (img.rows * f).to_i)
        elsif h > 0
          f = h.to_f / img.rows
          img = img.resize((img.columns * f).to_i, h)
        end
        if grayscale
          img = img.quantize(256, Magick::GRAYColorspace)
        end
        img.format = 'JPEG'
        img.write(tmp) {
          self.quality = 100
        }
        img.destroy!
      else
        tmp = file
      end

      if Mozjpeg.supported?
        of = File.open(dest, 'w')
        Mozjpeg.compress(
          File.new(tmp),
          of,
          arguments: "-quality #{$o['q'] || 60} -quant-table 2 -notrellis")
        of.close
      else
        FileUtils.copy(tmp, dest)
      end
    #rescue
    #  puts "error"
    #    FileUtils.copy(file, dest)
    #end

    print "."
  end

  puts ""
  print "Compress:"

  xfile = File.join("#{tmpdir}", 'result.cbz')
  Zip::File.open(xfile, Zip::File::CREATE) do |z|
    Dir.glob("#{outdir}/*.*").each do |yfile|
      z.add(File.basename(yfile), yfile)
      print "."
    end
  end

  dfile = File.basename(afile, File.extname(afile))
  FileUtils.move(xfile, File.join(File.dirname(afile), "#{dfile}_opt.cbz"))

  puts ""
end

FileUtils.rm_r(tmpdir) if Dir.exist?(tmpdir)

